# -*- coding: utf-8 -*-
"""second_hand_car_price_pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1javdZEUyKFTyfSDRIQjbpb5uz0_SD4QN

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from  sklearn import metrics

"""Data Collection and Processing"""

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv("/content/car data.csv")

# Inspecting the first 5 rows of dataframe
car_dataset.head()

# Checking the number of rows and columns
car_dataset.shape

# Getting some information about the dataset
car_dataset.info()

# Checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorical data"""

# Encoding "Fuel_Type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

# Encoding "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

# Encoding "Trannsmission" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting the data and target"""

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=2)

"""Model Training

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model = LinearRegression();

lin_reg_model.fit(X_train, Y_train)

"""Model Evaluation"""

# pridiction on training data
training_data_pridiction = lin_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train,training_data_pridiction)
print("R square error : ", error_score)

"""Visualize the actual price and predicted price"""

plt.scatter(Y_train,training_data_pridiction,color='red', alpha=0.6)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.grid()
plt.show()

# pridiction on test data
test_data_pridiction = lin_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test,test_data_pridiction)
print("R square error : ", error_score)

plt.scatter(Y_test,test_data_pridiction,color='red', alpha=0.6)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.grid()
plt.show()

accuracy = lin_reg_model.score(X_test,Y_test)
accuracy

"""2. Lasso Regression

"""

# loading the lasso regression model
lasso_reg_model = Lasso();

lasso_reg_model.fit(X_train, Y_train)

# pridiction on training data
training_data_pridiction = lasso_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train,training_data_pridiction)
print("R square error : ", error_score)

plt.scatter(Y_train,training_data_pridiction,color='red', alpha=0.6)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.grid()
plt.show()

# pridiction on test data
test_data_pridiction = lasso_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test,test_data_pridiction)
print("R square error : ", error_score)

plt.scatter(Y_test,test_data_pridiction,color='red', alpha=0.6)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.grid()
plt.show()

accuracy = lasso_reg_model.score(X_test,Y_test)
accuracy